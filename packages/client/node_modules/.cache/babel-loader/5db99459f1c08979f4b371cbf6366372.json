{"ast":null,"code":"var _jsxFileName = \"/root/Projects/bill-aggregator/packages/client/src/providers/auth/index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport loadScript from 'load-script';\nimport { useNavigate } from 'react-router-dom';\nimport { routes } from '../../router/routes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({});\nconst apiUrl = process.env.REACT_APP_API_URL;\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [isSignedIn, setIsSignedIn] = useState(false);\n  const [gapiLoaded, setGapiLoaded] = useState(false);\n  const navigate = useNavigate();\n\n  const handleCredentialResponse = data => {\n    if (data !== null && data !== void 0 && data.credential) {\n      setIsSignedIn(true);\n      localStorage.setItem('aggregator_token', data === null || data === void 0 ? void 0 : data.credential);\n      navigate(routes.main);\n    }\n  };\n\n  useEffect(() => {\n    console.log('Initializing');\n    loadScript('https://accounts.google.com/gsi/client', () => {\n      const {\n        google\n      } = window;\n\n      if (google) {\n        var _google$accounts, _google$accounts$id;\n\n        google === null || google === void 0 ? void 0 : (_google$accounts = google.accounts) === null || _google$accounts === void 0 ? void 0 : (_google$accounts$id = _google$accounts.id) === null || _google$accounts$id === void 0 ? void 0 : _google$accounts$id.initialize({\n          client_id: process.env.REACT_APP_GMAIL_CLIENT_ID,\n          callback: handleCredentialResponse\n        });\n        setGapiLoaded(true);\n      }\n    });\n  }, []);\n  useEffect(() => {\n    const verifyToken = async () => {\n      const token = localStorage.getItem('aggregator_token');\n\n      if (token) {\n        try {\n          await fetch(`${apiUrl}/verify/${token}`);\n          setIsSignedIn(true);\n        } catch (err) {\n          console.error(err);\n          setIsSignedIn(false);\n        }\n      } else {\n        setIsSignedIn(false);\n      }\n    };\n\n    verifyToken();\n  }, [gapiLoaded]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isSignedIn,\n      setIsSignedIn,\n      gapiLoaded\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"lV0bJQvyg7lBRo+cc0W9GCP1MIk=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n\n  const authContext = useContext(AuthContext);\n  return { ...authContext\n  };\n};\n\n_s2(useAuth, \"g0q6N3HTsGa67OokMUhTOzE2a0M=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/root/Projects/bill-aggregator/packages/client/src/providers/auth/index.js"],"names":["createContext","useContext","useEffect","useState","loadScript","useNavigate","routes","AuthContext","apiUrl","process","env","REACT_APP_API_URL","AuthProvider","children","isSignedIn","setIsSignedIn","gapiLoaded","setGapiLoaded","navigate","handleCredentialResponse","data","credential","localStorage","setItem","main","console","log","google","window","accounts","id","initialize","client_id","REACT_APP_GMAIL_CLIENT_ID","callback","verifyToken","token","getItem","fetch","err","error","useAuth","authContext"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,SAApC,EAA+CC,QAA/C,QAA+D,OAA/D;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,MAAT,QAAuB,qBAAvB;;AAEA,MAAMC,WAAW,gBAAGP,aAAa,CAAC,EAAD,CAAjC;AAEA,MAAMQ,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA3B;AAEA,OAAO,MAAMC,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC5C,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAMe,QAAQ,GAAGb,WAAW,EAA5B;;AAEA,QAAMc,wBAAwB,GAAIC,IAAD,IAAU;AACzC,QAAIA,IAAJ,aAAIA,IAAJ,eAAIA,IAAI,CAAEC,UAAV,EAAsB;AACpBN,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAO,MAAAA,YAAY,CAACC,OAAb,CAAqB,kBAArB,EAAyCH,IAAzC,aAAyCA,IAAzC,uBAAyCA,IAAI,CAAEC,UAA/C;AACAH,MAAAA,QAAQ,CAACZ,MAAM,CAACkB,IAAR,CAAR;AACD;AACF,GAND;;AAQAtB,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAtB,IAAAA,UAAU,CAAC,wCAAD,EAA2C,MAAM;AACzD,YAAM;AAAEuB,QAAAA;AAAF,UAAaC,MAAnB;;AAEA,UAAID,MAAJ,EAAY;AAAA;;AACVA,QAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,gCAAAA,MAAM,CAAEE,QAAR,6FAAkBC,EAAlB,4EAAsBC,UAAtB,CAAiC;AAC/BC,UAAAA,SAAS,EAAEvB,OAAO,CAACC,GAAR,CAAYuB,yBADQ;AAE/BC,UAAAA,QAAQ,EAAEf;AAFqB,SAAjC;AAKAF,QAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF,KAXS,CAAV;AAYD,GAdQ,EAcN,EAdM,CAAT;AAgBAf,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiC,WAAW,GAAG,YAAY;AAC9B,YAAMC,KAAK,GAAGd,YAAY,CAACe,OAAb,CAAqB,kBAArB,CAAd;;AAEA,UAAID,KAAJ,EAAW;AACT,YAAI;AACF,gBAAME,KAAK,CAAE,GAAE9B,MAAO,WAAU4B,KAAM,EAA3B,CAAX;AAEArB,UAAAA,aAAa,CAAC,IAAD,CAAb;AACD,SAJD,CAIE,OAAOwB,GAAP,EAAY;AACZd,UAAAA,OAAO,CAACe,KAAR,CAAcD,GAAd;AACAxB,UAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,OATD,MASO;AACLA,QAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,KAfD;;AAiBAoB,IAAAA,WAAW;AACZ,GAnBQ,EAmBN,CAACnB,UAAD,CAnBM,CAAT;AAqBA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLF,MAAAA,UADK;AAELC,MAAAA,aAFK;AAGLC,MAAAA;AAHK,KADT;AAAA,cAOGH;AAPH;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA7DM;;GAAMD,Y;UAGMP,W;;;KAHNO,Y;AA+Db,OAAO,MAAM6B,OAAO,GAAG,MAAM;AAAA;;AAC3B,QAAMC,WAAW,GAAGzC,UAAU,CAACM,WAAD,CAA9B;AAEA,SAAO,EACL,GAAGmC;AADE,GAAP;AAGD,CANM;;IAAMD,O","sourcesContent":["import { createContext, useContext, useEffect, useState } from 'react';\nimport loadScript from 'load-script';\nimport { useNavigate } from 'react-router-dom';\nimport { routes } from '../../router/routes';\n\nconst AuthContext = createContext({});\n\nconst apiUrl = process.env.REACT_APP_API_URL;\n\nexport const AuthProvider = ({ children }) => {\n  const [isSignedIn, setIsSignedIn] = useState(false);\n  const [gapiLoaded, setGapiLoaded] = useState(false);\n  const navigate = useNavigate();\n\n  const handleCredentialResponse = (data) => {\n    if (data?.credential) {\n      setIsSignedIn(true);\n      localStorage.setItem('aggregator_token', data?.credential);\n      navigate(routes.main);\n    }\n  };\n\n  useEffect(() => {\n    console.log('Initializing');\n    loadScript('https://accounts.google.com/gsi/client', () => {\n      const { google } = window;\n\n      if (google) {\n        google?.accounts?.id?.initialize({\n          client_id: process.env.REACT_APP_GMAIL_CLIENT_ID,\n          callback: handleCredentialResponse,\n        });\n\n        setGapiLoaded(true);\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    const verifyToken = async () => {\n      const token = localStorage.getItem('aggregator_token');\n\n      if (token) {\n        try {\n          await fetch(`${apiUrl}/verify/${token}`);\n\n          setIsSignedIn(true);\n        } catch (err) {\n          console.error(err);\n          setIsSignedIn(false);\n        }\n      } else {\n        setIsSignedIn(false);\n      }\n    };\n\n    verifyToken();\n  }, [gapiLoaded]);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isSignedIn,\n        setIsSignedIn,\n        gapiLoaded,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const authContext = useContext(AuthContext);\n\n  return {\n    ...authContext,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}